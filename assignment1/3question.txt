3).Compare and contrast mutable and immutable objects in Python with examples.

**Mutable objects**

Mutable objects are those that can be modified after creation. Examples of mutable objects in Python include:

** Lists: Lists are ordered collections of items that can be modified after creation.
** Dictionaries: Dictionaries are unordered collections of key-value pairs that can be modified after creation.
** Sets: Sets are unordered collections of unique items that can be modified after creation.

# List example
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # Output: [1, 2, 3, 4]


# Dictionary example
my_dict = {"name": "John", "age": 30}
my_dict["age"] = 31
print(my_dict)  # Output: {"name": "John", "age": 31}


# Set example
my_set = {1, 2, 3}
my_set.add(4)
print(my_set)  # Output: {1, 2, 3, 4}


**Immutable Objects**

Immutable objects are those that cannot be modified after creation. Examples of immutable objects in Python include:

- Integers: Integers are whole numbers that cannot be modified after creation.
- Floats: Floats are decimal numbers that cannot be modified after creation.
- Strings: Strings are sequences of characters that cannot be modified after creation.
- Tuples: Tuples are ordered collections of items that cannot be modified after creation.

Example:-


# Integer example
my_int = 5
# Trying to modify an integer is not possible, it's a new assignment
my_int = my_int + 1
print(my_int)  # Output: 6


# String example
my_str = "Hello"
# Trying to modify a string is not possible, it's a new assignment
my_str = my_str + " World"
print(my_str)  # Output: "Hello World"


# Tuple example
my_tuple = (1, 2, 3)
# Trying to modify a tuple will raise an error
try:
    my_tuple[0] = 4
except TypeError as e:
    print(e)
________________________________________________________________________________________________________________________
Aspect 	                                Mutable Objects	                                                Immutable Objects                                  
Definition	                              *Can be modified after creation	                              *Cannot be modified after creation
Modification Behavior            *Changes affect the original object.                          *Modification creates a new object.
Memory Location	              *Same memory location after modification.	      *New memory location after modification.                 
Examples                               *Lists, dictionaries, sets.	                                      *Strings, tuples, numbers.
Hashability	                      *Not hashable.	                                                      *Hashable.
_________________________________________________________________________________________________________________________